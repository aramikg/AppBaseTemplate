{"_id":"i18n","_rev":"56-02f5c2f3b51479848cc34846ddb5d6bd","name":"i18n","description":"lightweight translation module with dynamic json storage","dist-tags":{"latest":"0.5.0"},"versions":{"0.1.0":{"name":"i18n","description":"lightweight simple translation module with dynamic json storage","version":"0.1.0","homepage":"http://github.com/mashpie/i18n-node","repository":{"type":"git","url":"git://github.com/mashpie/i18n-node.git"},"author":{"name":"Marcus Spiegel","email":"marcus.spiegel@gmail.com"},"main":"./index","directories":{"lib":"."},"dependencies":{"sprintf":">=0.1.1"},"engines":{"node":">=0.4.0"},"_id":"i18n@0.1.0","_engineSupported":true,"_npmVersion":"0.3.17","_nodeVersion":"v0.4.3","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"c04646d03b2e06bdeb5659bc99ef3e0bb9e070e2","tarball":"http://registry.npmjs.org/i18n/-/i18n-0.1.0.tgz"}},"0.3.0":{"name":"i18n","description":"lightweight simple translation module with dynamic json storage","version":"0.3.0","homepage":"http://github.com/mashpie/i18n-node","repository":{"type":"git","url":"git://github.com/mashpie/i18n-node.git"},"author":{"name":"Marcus Spiegel","email":"marcus.spiegel@gmail.com"},"main":"./index","directories":{"lib":"."},"dependencies":{"sprintf":">=0.1.1"},"engines":{"node":">=0.4.0"},"_id":"i18n@0.3.0","_engineSupported":true,"_npmVersion":"0.3.17","_nodeVersion":"v0.4.4","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"96149c2d295c4f74f2bc621348787f11b459edd8","tarball":"http://registry.npmjs.org/i18n/-/i18n-0.3.0.tgz"}},"0.3.5":{"name":"i18n","description":"lightweight simple translation module with dynamic json storage","version":"0.3.5","homepage":"http://github.com/mashpie/i18n-node","repository":{"type":"git","url":"git://github.com/mashpie/i18n-node.git"},"author":{"name":"Marcus Spiegel","email":"marcus.spiegel@gmail.com"},"main":"./index","directories":{"lib":"."},"dependencies":{"sprintf":">=0.1.1"},"devDependencies":{"expresso":">=0.9.2","vows":">=0.6.2"},"engines":{"node":">=0.4.0"},"scripts":{"test":"expresso test/*"},"_npmUser":{"name":"mashpie","email":"marcus.spiegel@gmail.com"},"_id":"i18n@0.3.5","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.9","_nodeVersion":"v0.6.13","_defaultsLoaded":true,"dist":{"shasum":"fb246dce55c8ff2bf88eb213f56d796ab3d6eba1","tarball":"http://registry.npmjs.org/i18n/-/i18n-0.3.5.tgz"},"maintainers":[{"name":"mashpie","email":"marcus.spiegel@gmail.com"}]},"0.3.6":{"name":"i18n","description":"lightweight simple translation module with dynamic json storage","version":"0.3.6","homepage":"http://github.com/mashpie/i18n-node","repository":{"type":"git","url":"http://github.com/mashpie/i18n-node.git"},"author":{"name":"Marcus Spiegel","email":"marcus.spiegel@gmail.com"},"main":"./index","directories":{"lib":"."},"dependencies":{"sprintf":">=0.1.1"},"devDependencies":{"expresso":">=0.9.2"},"engines":{"node":">=0.4.0"},"scripts":{"test":"expresso test/*"},"_id":"i18n@0.3.6","dist":{"shasum":"bf204a8a29218b711166fc4eebe4f3e45e608741","tarball":"http://registry.npmjs.org/i18n/-/i18n-0.3.6.tgz"},"_npmVersion":"1.1.66","_npmUser":{"name":"mashpie","email":"marcus.spiegel@gmail.com"},"maintainers":[{"name":"mashpie","email":"marcus.spiegel@gmail.com"}]},"0.3.7":{"name":"i18n","description":"lightweight simple translation module with dynamic json storage","version":"0.3.7","homepage":"http://github.com/mashpie/i18n-node","repository":{"type":"git","url":"http://github.com/mashpie/i18n-node.git"},"author":{"name":"Marcus Spiegel","email":"marcus.spiegel@gmail.com"},"main":"./index","directories":{"lib":"."},"dependencies":{"sprintf":">=0.1.1"},"devDependencies":{"mocha":">=1.8.1","should":">=1.2.1"},"engines":{"node":">=0.4.0"},"scripts":{"test":"mocha"},"_id":"i18n@0.3.7","dist":{"shasum":"3f1ba3901be7b8763387d2da444dfe438850b4f2","tarball":"http://registry.npmjs.org/i18n/-/i18n-0.3.7.tgz"},"_npmVersion":"1.1.66","_npmUser":{"name":"mashpie","email":"marcus.spiegel@gmail.com"},"maintainers":[{"name":"mashpie","email":"marcus.spiegel@gmail.com"}]},"0.3.8":{"name":"i18n","description":"lightweight simple translation module with dynamic json storage","version":"0.3.8","homepage":"http://github.com/mashpie/i18n-node","repository":{"type":"git","url":"http://github.com/mashpie/i18n-node.git"},"author":{"name":"Marcus Spiegel","email":"marcus.spiegel@gmail.com"},"main":"./index","directories":{"lib":"."},"dependencies":{"sprintf":">=0.1.1"},"devDependencies":{"mocha":">=1.8.1","should":">=1.2.1"},"engines":{"node":">=0.4.0"},"scripts":{"test":"mocha -R spec"},"_id":"i18n@0.3.8","dist":{"shasum":"73063301739e0733f949c0ccf5d7f833e7b53aa2","tarball":"http://registry.npmjs.org/i18n/-/i18n-0.3.8.tgz"},"_npmVersion":"1.1.66","_npmUser":{"name":"mashpie","email":"marcus.spiegel@gmail.com"},"maintainers":[{"name":"mashpie","email":"marcus.spiegel@gmail.com"}]},"0.3.9":{"name":"i18n","description":"lightweight simple translation module with dynamic json storage","version":"0.3.9","homepage":"http://github.com/mashpie/i18n-node","repository":{"type":"git","url":"http://github.com/mashpie/i18n-node.git"},"author":{"name":"Marcus Spiegel","email":"marcus.spiegel@gmail.com"},"main":"./index","directories":{"lib":"."},"dependencies":{"sprintf":">=0.1.1"},"devDependencies":{"mocha":">=1.8.1","should":">=1.2.1"},"engines":{"node":">=0.4.0"},"scripts":{"test":"mocha -R spec"},"_id":"i18n@0.3.9","dist":{"shasum":"33b07e80b6635906f8ca898a9ea80e1744816cf6","tarball":"http://registry.npmjs.org/i18n/-/i18n-0.3.9.tgz"},"_npmVersion":"1.1.66","_npmUser":{"name":"mashpie","email":"marcus.spiegel@gmail.com"},"maintainers":[{"name":"mashpie","email":"marcus.spiegel@gmail.com"}]},"0.4.0":{"name":"i18n","description":"lightweight simple translation module with dynamic json storage","version":"0.4.0","homepage":"http://github.com/mashpie/i18n-node","repository":{"type":"git","url":"http://github.com/mashpie/i18n-node.git"},"author":{"name":"Marcus Spiegel","email":"marcus.spiegel@gmail.com"},"main":"./index","keywords":["template","i18n","l10n"],"directories":{"lib":"."},"dependencies":{"sprintf":">=0.1.1","debug":"*"},"devDependencies":{"mocha":">=1.8.1","should":">=1.2.1"},"engines":{"node":">=0.4.0"},"scripts":{"test":"make test"},"_id":"i18n@0.4.0","dist":{"shasum":"b38ed40b127b7a7ec73a09499a058d559637e70e","tarball":"http://registry.npmjs.org/i18n/-/i18n-0.4.0.tgz"},"_npmVersion":"1.1.66","_npmUser":{"name":"mashpie","email":"marcus.spiegel@gmail.com"},"maintainers":[{"name":"mashpie","email":"marcus.spiegel@gmail.com"}]},"0.4.1":{"name":"i18n","description":"lightweight translation module with dynamic json storage","version":"0.4.1","homepage":"http://github.com/mashpie/i18n-node","repository":{"type":"git","url":"http://github.com/mashpie/i18n-node.git"},"author":{"name":"Marcus Spiegel","email":"marcus.spiegel@gmail.com"},"main":"./index","keywords":["template","i18n","l10n"],"directories":{"lib":"."},"dependencies":{"sprintf":">=0.1.1","debug":"*"},"devDependencies":{"mocha":">=1.8.1","should":">=1.2.1"},"engines":{"node":">=0.4.0"},"scripts":{"test":"make test"},"_id":"i18n@0.4.1","dist":{"shasum":"a09ca30ffde109b0d2f6ce888db4c281905e8710","tarball":"http://registry.npmjs.org/i18n/-/i18n-0.4.1.tgz"},"_npmVersion":"1.1.66","_npmUser":{"name":"mashpie","email":"marcus.spiegel@gmail.com"},"maintainers":[{"name":"mashpie","email":"marcus.spiegel@gmail.com"}]},"0.5.0":{"name":"i18n","description":"lightweight translation module with dynamic json storage","version":"0.5.0","homepage":"http://github.com/mashpie/i18n-node","repository":{"type":"git","url":"http://github.com/mashpie/i18n-node.git"},"author":{"name":"Marcus Spiegel","email":"marcus.spiegel@gmail.com"},"main":"./index","keywords":["template","i18n","l10n"],"directories":{"lib":"."},"dependencies":{"sprintf":">=0.1.1","mustache":"*","debug":"*"},"devDependencies":{"mocha":">=1.8.1","should":">=1.2.1","express":" < 4.0.0","zombie":"<2.0.0","async":"*","hbs":"*","jade":"^1.3.1","consolidate":"*","restify":"*"},"engines":{"node":">=0.8.0"},"scripts":{"test":"make test"},"bugs":{"url":"https://github.com/mashpie/i18n-node/issues"},"_id":"i18n@0.5.0","dist":{"shasum":"0da77ad27f82785d8a2db5c67c6a2ca3997c1bbe","tarball":"http://registry.npmjs.org/i18n/-/i18n-0.5.0.tgz"},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"mashpie","email":"marcus.spiegel@gmail.com"},"maintainers":[{"name":"mashpie","email":"marcus.spiegel@gmail.com"}]},"0.0.1-a":{"name":"i18n","description":"lightweight simple translation module with dynamic json storage","version":"0.0.1-a","homepage":"http://github.com/mashpie/i18n-node","repository":{"type":"git","url":"git://github.com/mashpie/i18n-node.git"},"author":{"name":"Marcus Spiegel","email":"marcus.spiegel@gmail.com"},"main":"./index","directories":{"lib":"."},"dependencies":{"sprintf":">=0.1.1"},"engines":{"node":">=0.4.0"},"_id":"i18n@0.0.1-a","_engineSupported":true,"_npmVersion":"0.3.17","_nodeVersion":"v0.4.3","dist":{"shasum":"40d696d38c20b2756c219b5013987377e34a4c72","tarball":"http://registry.npmjs.org/i18n/-/i18n-0.0.1a.tgz"}}},"maintainers":[{"name":"mashpie","email":"marcus.spiegel@gmail.com"}],"time":{"modified":"2014-06-14T21:37:15.043Z","created":"2011-03-25T23:35:52.892Z","0.0.1a":"2011-03-25T23:35:53.918Z","0.1.0":"2011-03-28T13:58:47.736Z","0.3.0":"2011-03-29T13:13:57.656Z","0.3.5":"2012-08-06T08:38:56.050Z","0.3.6":"2013-01-27T22:59:35.334Z","0.3.7":"2013-01-28T01:26:09.189Z","0.3.8":"2013-03-04T14:42:19.242Z","0.3.9":"2013-03-15T23:39:58.703Z","0.4.0":"2013-04-10T16:14:27.277Z","0.4.1":"2013-07-06T15:32:30.338Z","0.5.0":"2014-06-14T21:37:15.043Z"},"author":{"name":"Marcus Spiegel","email":"marcus.spiegel@gmail.com"},"repository":{"type":"git","url":"http://github.com/mashpie/i18n-node.git"},"users":{"einfallstoll":true,"oliversalzburg":true,"haruths":true,"majj":true,"antoniobrandao":true,"mashpie":true,"paulomcnally":true,"r3nya":true,"maobean":true,"jerone":true,"n370":true,"adamk":true,"goblindegook":true,"wolfgangschoeffel":true,"streamer":true,"j3kz":true,"wagnercsfilho":true,"kulakowka":true,"docksteaderluke":true,"nickeljew":true,"aprilrd":true,"pirxpilot":true},"readme":"# i18n\n\nLightweight simple translation module with dynamic json storage. Supports plain vanilla node.js apps and should work with any framework (like _express_, _restify_ and probably more) that exposes an `app.use()` method passing in `res` and `req` objects.\nUses common __('...') syntax in app and templates.\nStores language files in json files compatible to [webtranslateit](http://webtranslateit.com/) json format.\nAdds new strings on-the-fly when first used in your app.\nNo extra parsing needed.\n\n[![Build Status](https://secure.travis-ci.org/mashpie/i18n-node.png?branch=master)](http://travis-ci.org/mashpie/i18n-node) [![NPM version](https://badge.fury.io/js/i18n.png)](http://badge.fury.io/js/i18n)\n[![Dependency Status](https://gemnasium.com/mashpie/i18n-node.png)](https://gemnasium.com/mashpie/i18n-node)\n\n## Install\n\n\tnpm install i18n\n\n## Test\n\n\tnpm test\n\n## Load\n\n\t// load modules\n\tvar express = require('express'),\n\t    i18n = require(\"i18n\");\n\nnow you are ready to use a global `i18n.__('Hello')`. **Global** assumes you share a common state of localization in any time and any part of your app. This is usually fine in cli-style scripts. When serving responses to http requests you'll need to make sure that scope is __NOT__ shared globally but attached to your request object.\n\n## Configure\n\nMinimal example, just setup two locales and a project specific directory\n\n    i18n.configure({\n        locales:['en', 'de'],\n        directory: __dirname + '/locales'\n    });\n\n### list of configuration options\n\n\ti18n.configure({\n\t    // setup some locales - other locales default to en silently\n\t    locales:['en', 'de'],\n\n\t    // you may alter a site wide default locale\n\t    defaultLocale: 'de',\n\n\t    // sets a custom cookie name to parse locale settings from  - defaults to NULL\n\t    cookie: 'yourcookiename',\n\n\t    // where to store json files - defaults to './locales' relative to modules directory\n\t    directory: './mylocales',\n\n\t    // whether to write new locale information to disk - defaults to true\n\t    updateFiles: false,\n\n\t    // what to use as the indentation unit - defaults to \"\\t\"\n\t    indent: \"\\t\",\n\n\t    // setting extension of json files - defaults to '.json' (you might want to set this to '.js' according to webtranslateit)\n\t    extension: '.js',\n\n\t    // enable object notation\n\t    objectNotation: false\n\t});\n\n## Example usage in gobal scope\n\nIn your app, when not registered to a specific object:\n\n\tvar greeting = i18n.__('Hello');\n\n## Example usage in express.js\n\nIn an express app, you might use i18n.init to gather language settings of your visitors and also bind your helpers to response object honoring request objects locale, ie:\n\n\t// Configuration\n\tapp.configure(function() {\n\n    \t[...]\n\n\t    // default: using 'accept-language' header to guess language settings\n\t    app.use(i18n.init);\n\n\t    [...]\n\t});\n\nin your apps methods:\n\n\tapp.get('/de', function(req, res){\n      var greeting = res.__('Hello');\n    });\n\n\nin your templates (depending on your template engine)\n\n\t<%= __('Hello') %>\n\n\t${__('Hello')}\n\n\n## Examples for common setups\n\nSee [tested examples](https://github.com/mashpie/i18n-node/tree/master/examples) inside `/examples` or browse these gists:\n\n* [plain node.js + http](https://gist.github.com/mashpie/5188567)\n* [plain node.js + restify](https://gist.github.com/mashpie/5694251)\n* [express 3 + cookie](https://gist.github.com/mashpie/5124626)\n* [express 3 + hbs 2 (+ cookie)](https://gist.github.com/mashpie/5246334)\n* [express 3 + mustache (+ cookie)](https://gist.github.com/mashpie/5247373)\n* [express 3 + jade 0.3 (+ cookie)](https://gist.github.com/hankwang/5994144)\n* [express 4 + + cookie](https://gist.github.com/mashpie/08e5a0ee764f7b6b1355)\n\n## API\n\n### __()\n\nTranslates a single phrase and adds it to locales if unknown. Returns translated parsed and substituted string.\n\n\t// template and global (this.locale == 'de')\n\t__('Hello'); // Hallo\n\t__('Hello %s', 'Marcus'); // Hallo Marcus\n\t__('Hello {{name}}', { name: 'Marcus' }); // Hallo Marcus\n\n\n\t// scoped via req object (req.locale == 'de')\n\treq.__('Hello'); // Hallo\n\treq.__('Hello %s', 'Marcus'); // Hallo Marcus\n\treq.__('Hello {{name}}', { name: 'Marcus' }); // Hallo Marcus\n\n\t// passing specific locale\n\t__({phrase: 'Hello', locale: 'fr'}); // Salut\n\t__({phrase: 'Hello %s', locale: 'fr'}, 'Marcus'); // Salut Marcus\n\t__({phrase: 'Hello {{name}}, locale: 'fr'}, { name: 'Marcus' }); // Salut Marcus\n\n### __n()\n\nPlurals translation of a single phrase. Singular and plural forms will get added to locales if unknown. Returns translated parsed and substituted string based on `count` parameter.\n\n\t// template and global (this.locale == 'de')\n\t__n(\"%s cat\", \"%s cats\", 1); // 1 Katze\n\t__n(\"%s cat\", \"%s cats\", 3); // 3 Katzen\n\n\t// scoped via req object (req.locale == 'de')\n\treq.__n(\"%s cat\", \"%s cats\", 1); // 1 Katze\n\treq.__n(\"%s cat\", \"%s cats\", 3); // 3 Katzen\n\n\t// passing specific locale\n\t__n({singular: \"%s cat\", plural: \"%s cats\", locale: \"fr\"}, 1); // 1 chat\n\t__n({singular: \"%s cat\", plural: \"%s cats\", locale: \"fr\"}, 3); // 3 chat\n\n\t__n({singular: \"%s cat\", plural: \"%s cats\", locale: \"fr\", count: 1}); // 1 chat\n\t__n({singular: \"%s cat\", plural: \"%s cats\", locale: \"fr\", count: 3}); // 3 chat\n\n### setLocale()\n\nSetting the current locale (ie.: `en`) globally or in current scope.\n\n\tsetLocale('de');\n\tsetLocale(req, 'de');\n\treq.setLocale('de');\n\nTo change the initial locale (when you set it on `i18n.init()`) for all the user session (eg.: you have a language\nselector on your web page to let the user select the preferred language), you have some options.\nYou could set it via `res.setLocale('de')` on each loop before load the each page.\nOr you could manage it via any session middleware or by setting a cookie in the client and let i18n read it's value.\n\nIn the last case you will need to enable cookies (eg. for express will be `app.use(express.cookieParser())`) and then\nyou can use the `i18n.configure.cookie` to let i18n which language must use. Simply use the same cookie name when setting it in the user preferred language, like here:\n\n\tres.cookie('yourcookiename', 'de', { maxAge: 900000, httpOnly: true });\n\nAfter this and until the cookie expires, i18n will get the value of the cookie and will set that language instead of default for every page.\n\n### getLocale()\n\nGetting the current locale (ie.: `en`) from current scope or globally.\n\n\tgetLocale(); // --> de\n\tgetLocale(req); // --> de\n\treq.getLocale(); // --> de\n\n### getCatalog()\n\nReturns a whole catalog optionally based on current scope and locale.\n\n\tgetCatalog(); // returns all locales\n\tgetCatalog('de'); // returns just 'de'\n\n\tgetCatalog(req); // returns all locales\n\tgetCatalog(req, 'de'); // returns just 'de'\n\n\treq.getCatalog(); // returns all locales\n\treq.getCatalog('de'); // returns just 'de'\n\n\n\n## Optionally manual attaching helpers for different template engines\n\nIn general i18n has to be attached to the response object to let it's public api get accessible in your templates and methods. As of **0.4.0** i18n tries to do so internally via `i18n.init`, as if you were doing it in `app.configure` on your own:\n\n\tapp.use(function(req, res, next) {\n\t\t// express helper for natively supported engines\n\t\tres.locals.__ = res.__ = function() {\n\t\t\treturn i18n.__.apply(req, arguments);\n\t\t};\n\n\t\t[...]\n\n\t\tnext();\n\t});\n\nDifferent engines need different implementations, so yours might miss or not work with the current default helpers. This one showing an example for mustache in express:\n\n\t// register helper as a locals function wrapped as mustache expects\n\tapp.use(function (req, res, next) {\n\t\t// mustache helper\n\t\tres.locals.__ = function () {\n\t\t  return function (text, render) {\n\t\t    return i18n.__.apply(req, arguments);\n\t\t  };\n\t\t};\n\n\t\t[...]\n\n\t\tnext();\n\t});\n\nYou could still setup your own implementation. Please refer to Examples below, post an issue or contribute your setup.\n\n## Output parsing of expressions\n\nAs inspired by gettext there is currently support for sprintf-style expressions. Named parameters are on roadmap.\n\n### sprintf support\n\n\tvar greeting = __('Hello %s, how are you today?', 'Marcus');\n\nthis puts *Hello Marcus, how are you today?*. You might add endless arguments and even nest it.\n\n\tvar greeting = __('Hello %s, how are you today? How was your %s.', 'Marcus', __('weekend'));\n\nwhich puts *Hello Marcus, how are you today? How was your weekend.*\n\n### mustache support\n\nYou may also use [mustache](http://mustache.github.io/) syntax for your message strings. To pass named parameters to your message, just provide an object as the second parameter. You can still pass unnamed parameters by adding additional arguments.\n\n\tvar greeting = __('Hello {{name}}, how are you today?', { name: 'Marcus' });\n\nthis puts *Hello Marcus, how are you today?*. You might also combine it with sprintf arguments and also nest it.\n\n\tvar greeting = __('Hello {{name}}, how was your %s.', { name: 'Marcus' }, __('weekend'));\n\nwhich puts *Hello Marcus, how was your weekend.*\n\n### variable support\n\nyou might even use dynamic variables as they get interpreted on the fly. Better make sure no user input finds it's way to that point as they all get added to the `en.js` file if not yet existing.\n\n\tvar greetings = ['Hi', 'Hello', 'Howdy'];\n    for (var i=0; i < greetings.length; i++) {\n        console.log( __(greetings[i]) );\n    };\n\nwhich puts\n\n\tHi\n\tHello\n\tHowdy\n\n### basic plural support\n\ntwo different plural forms are supported as response to `count`:\n\n\tvar singular = __n('%s cat', '%s cats', 1);\n    var plural = __n('%s cat', '%s cats', 3);\n\nthis puts **1 cat** or **3 cats**\nand again these could get nested:\n\n\tvar singular = __n('There is one monkey in the %%s', 'There are %d monkeys in the %%s', 1, 'tree');\n\tvar plural = __n('There is one monkey in the %%s', 'There are %d monkeys in the %%s', 3, 'tree');\n\nputting *There is one monkey in the tree* or *There are 3 monkeys in the tree*\n\n## Storage\n\nWill get modular support for different storage engines, currently just json files are stored in filesystem.\n\n### json file\n\nthe above will automatically generate a `en.json` by default inside `./locales/` which looks like\n\n\t{\n\t\t\"Hello\": \"Hello\",\n\t\t\"Hello %s, how are you today?\": \"Hello %s, how are you today?\",\n\t\t\"weekend\": \"weekend\",\n\t\t\"Hello %s, how are you today? How was your %s.\": \"Hello %s, how are you today? How was your %s.\",\n\t\t\"Hi\": \"Hi\",\n\t\t\"Howdy\": \"Howdy\",\n\t\t\"%s cat\": {\n\t\t\t\"one\": \"%s cat\",\n\t\t\t\"other\": \"%s cats\"\n\t\t},\n\t\t\"There is one monkey in the %%s\": {\n\t\t\t\"one\": \"There is one monkey in the %%s\",\n\t\t\t\"other\": \"There are %d monkeys in the %%s\"\n\t\t},\n\t\t\"tree\": \"tree\"\n\t}\n\nthat file can be edited or just uploaded to [webtranslateit](http://docs.webtranslateit.com/file_formats/) for any kind of collaborative translation workflow:\n\n\t{\n\t\t\"Hello\": \"Hallo\",\n\t\t\"Hello %s, how are you today?\": \"Hallo %s, wie geht es dir heute?\",\n\t\t\"weekend\": \"Wochenende\",\n\t\t\"Hello %s, how are you today? How was your %s.\": \"Hallo %s, wie geht es dir heute? Wie war dein %s.\",\n\t\t\"Hi\": \"Hi\",\n\t\t\"Howdy\": \"Hallöchen\",\n\t\t\"%s cat\": {\n\t\t\t\"one\": \"%s Katze\",\n\t\t\t\"other\": \"%s Katzen\"\n\t\t},\n\t\t\"There is one monkey in the %%s\": {\n\t\t\t\"one\": \"Im %%s sitzt ein Affe\",\n\t\t\t\"other\": \"Im %%s sitzen %d Affen\"\n\t\t},\n\t\t\"tree\": \"Baum\"\n\t}\n\n## Logging & Debugging\n\nLogging any kind of output is moved to [debug](https://github.com/visionmedia/debug) module. To let i18n output anything run your app with `DEBUG` env set like so:\n\n\t$ DEBUG=i18n:* node app.js\n\ni18n exposes three log-levels:\n\n* i18n:debug\n* i18n:warn\n* i18n:error\n\nif you only want to get errors and warnings reported start your node server like so:\n\n\t$ DEBUG=i18n:warn,i18n:error node app.js\n\nCombine those settings with you existing application if any of you other modules or libs also uses __debug__\n\n## Object notation\n\nIn addition to the traditional, linear translation lists, i18n also supports hierarchical translation catalogs.\n\nTo enable this feature, be sure to set `objectNotation` to `true` in your `configure()` call.\n\nInstead of calling `__(\"Hello\")` you might call `__(\"greeting.formal\")` to retrieve a formal greeting from a translation document like this one:\n\n    \"greeting\": {\n        \"formal\": \"Hello\",\n        \"informal\": \"Hi\",\n        \"placeholder\": {\n            \"formal\": \"Hello %s\",\n            \"informal\": \"Hi %s\"\n        }\n    }\n\nIn the document, the translation terms, which include placeholders, are nested inside the \"greeting\" translation. They can be accessed and used in the same way, like so `__('greeting.placeholder.informal', 'Marcus')`.\n\n### Pluralization\n\nObject notation also supports pluralization. When making use of it, the \"one\" and \"other\" entries are used implicitly for an object in the translation document. For example, consider the following document:\n\n    \"cat\": {\n        \"one\": \"Katze\",\n        \"other\": \"Katzen\"\n    }\n\nWhen accessing these, you would use `__n(\"cat\", \"cat\", 3)` to tell i18n to use both the singular and plural form of the \"cat\" entry. Naturally, you could also access these members explicitly with `__(\"cat.one\")` and `__(\"cat.other\")`.\n\n### Defaults\n\nWhen starting a project from scratch, your translation documents will probably be empty. i18n takes care of filling your translation documents for you. Whenever you use an unknown object, it is added to the translation documents.\n\nBy default, when using object notation, the provided string literal will be inserted and returned as the default string. As an example, this is what the \"greeting\" object shown earlier would look like by default:\n\n    \"greeting\": {\n        \"formal\": \"greeting.formal\",\n        \"informal\": \"greeting.informal\"\n    }\n\nIn case you would prefer to have a default string automatically inserted and returned, you can provide that default string by appending it to your object literal, delimited by a `:`. For example:\n\n    __(\"greeting.formal:Hello\")\n    __(\"greeting.placeholder.informal:Hi %s\")\n\n## Changelog\n\n* 0.5.0: feature release; added {{mustache}} parsing by #85, added \"object.notation\" by #110, fixed buggy req.__() implementation by #111 and closed 13 issues\n* 0.4.1: stable release; merged/closed: #57, #60, #67 typo fixes; added more examples and new features: #53, #65, #66 - and some more api reference\n* 0.4.0: stable release; closed: #22, #24, #4, #10, #54; added examples, clarified concurrency usage in different template engines, added `i18n.getCatalog`\n* 0.3.9: express.js usage, named api, jscoverage + more test, refactored configure, closed: #51, #20, #16, #49\n* 0.3.8: fixed: #44, #49; merged: #47, #45, #50; added: #33; updated: README\n* 0.3.7: tests by mocha.js, added `this.locale` to `__` and `__n`\n* 0.3.6: travisCI, writeFileSync, devDependencies, jslint, MIT, fixed: #29, #9, merged: #25, #30, #43\n* 0.3.5: fixed some issues, prepared refactoring, prepared publishing to npm finally\n* 0.3.4: merged pull request #13 from Fuitad/master and updated README\n* 0.3.3: merged pull request from codders/master and modified for backward compatibility. Usage and tests pending\n* 0.3.2: merged pull request #7 from carlptr/master and added tests, modified fswrite to do sync writes\n* 0.3.0: added configure and init with express support (calling guessLanguage() via 'accept-language')\n* 0.2.0: added plurals\n* 0.1.0: added tests\n* 0.0.1: start\n\n## Licensed under MIT\n\nCopyright (c) 2011-2014 Marcus Spiegel <marcus.spiegel@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","homepage":"http://github.com/mashpie/i18n-node","keywords":["template","i18n","l10n"],"bugs":{"url":"https://github.com/mashpie/i18n-node/issues"},"readmeFilename":"README.md","_attachments":{},"_etag":"\"4MEKIM6VSRJ3UTJDN5TPJ9DPS\""}